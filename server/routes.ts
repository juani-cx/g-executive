import type { Express } from "express";
import { createServer, type Server } from "http";
import { storage } from "./storage";
import { insertCampaignSchema, insertCatalogSchema, insertCatalogProductSchema, type GeneratedAsset } from "@shared/schema";
import { analyzeImageForCampaign, generateCampaignAssets, generatePreviewAssets, enrichProductDescription, generateImage, generateCardDesign } from "./services/openai";
import { CollaborationService } from "./services/collaboration";
import multer from "multer";
import { v4 as uuidv4 } from "uuid";

const upload = multer({ 
  storage: multer.memoryStorage(),
  limits: { fileSize: 50 * 1024 * 1024 } // 50MB limit
});

export async function registerRoutes(app: Express): Promise<Server> {
  
  const httpServer = createServer(app);
  const collaborationService = new CollaborationService(httpServer);
  
  // Campaign routes
  app.post("/api/campaigns", async (req, res) => {
    try {
      const validatedData = insertCampaignSchema.parse(req.body);
      const campaign = await storage.createCampaign(validatedData);
      res.json(campaign);
    } catch (error) {
      res.status(400).json({ message: "Invalid campaign data", error: (error as Error).message });
    }
  });

  // Create campaign with direct canvas navigation
  app.post("/api/create-campaign", async (req, res) => {
    try {
      const {
        name,
        description,
        brandTone,
        targetAudience,
        campaignGoals,
        budget,
        timeline,
        platforms,
        primaryColor,
        secondaryColor,
        sourceImage
      } = req.body;

      // Create campaign record
      const campaignData = {
        name,
        sourceImageUrl: sourceImage || null,
        brandTone,
        targetPlatforms: platforms || [],
        campaignFocus: campaignGoals?.[0] || "Brand Awareness",
        generatedAssets: [],
        status: "active"
        // createdAt will be auto-generated by database
      };

      const campaign = await storage.createCampaign(campaignData);

      // Create platform-specific cards based on user selections
      const generatedAssets: any[] = [];

      // Add a configuration card
      const configCard = {
        id: `config-${campaign.id}`,
        type: "config" as const,
        title: "Campaign Configuration",
        status: "ready" as const,
        content: {
          name,
          description,
          brandTone,
          targetAudience,
          campaignGoals,
          budget,
          timeline,
          platforms,
          primaryColor,
          secondaryColor
        },
        position: { x: 100, y: 100 },
        size: { width: 350, height: 400 },
        version: 1
      };
      generatedAssets.push(configCard);

      // Create platform-specific cards
      const platformMapping: Record<string, string> = {
        "LinkedIn": "linkedin",
        "Instagram": "instagram", 
        "Facebook": "facebook",
        "Twitter": "twitter",
        "Email": "email",
        "Website": "landing"
      };

      let cardIndex = 1;
      platforms?.forEach((platform: string, index: number) => {
        const platformType = platformMapping[platform] || platform.toLowerCase();
        const platformCard = {
          id: `${platformType}-${campaign.id}-${cardIndex}`,
          type: platformType as const,
          title: `${platform} Content`,
          status: "generating" as const,
          content: {
            text: `Generating ${platform} content for ${name}...`,
            platform: platform.toLowerCase(),
            goal: campaignGoals?.[0] || "Brand Awareness"
          },
          position: { 
            x: 500 + (index * 380), 
            y: 100 + Math.floor(index / 3) * 450 
          },
          size: { width: 350, height: 400 },
          version: 1
        };
        generatedAssets.push(platformCard);
        cardIndex++;
      });

      // Store all cards as part of campaign
      const updatedCampaign = await storage.updateCampaign(campaign.id, {
        ...campaign,
        generatedAssets
      });

      // Start background generation for platform cards
      platforms?.forEach(async (platform: string) => {
        const platformType = platformMapping[platform] || platform.toLowerCase();
        const prompt = `${description} - ${platform} content for ${campaignGoals?.join(', ') || 'Brand Awareness'}`;
        
        try {
          console.log(`Generating ${platformType} design for prompt: ${prompt}`);
          // Generate platform-specific content using existing generateCardDesign function
          setTimeout(async () => {
            try {
              const generatedContent = await generateCardDesign(platformType, prompt);
              console.log(`Generated ${platformType} content:`, generatedContent?.content?.substring(0, 100));
              
              // Update the campaign with generated content
              const currentCampaign = await storage.getCampaign(campaign.id);
              if (currentCampaign && currentCampaign.generatedAssets) {
                const updatedAssets = currentCampaign.generatedAssets.map((asset: any) => {
                  if (asset.type === platformType && asset.status === "generating") {
                    return {
                      ...asset,
                      status: "ready" as const,
                      content: {
                        ...asset.content,
                        text: generatedContent?.content || `Generated ${platform} content`,
                        generatedAt: new Date().toISOString()
                      }
                    };
                  }
                  return asset;
                });
                
                await storage.updateCampaign(campaign.id, {
                  ...currentCampaign,
                  generatedAssets: updatedAssets
                });
              }
            } catch (error) {
              console.error(`Failed to generate ${platformType} content:`, error);
              // Update status to error
              const currentCampaign = await storage.getCampaign(campaign.id);
              if (currentCampaign && currentCampaign.generatedAssets) {
                const updatedAssets = currentCampaign.generatedAssets.map((asset: any) => {
                  if (asset.type === platformType && asset.status === "generating") {
                    return { ...asset, status: "error" as const };
                  }
                  return asset;
                });
                
                await storage.updateCampaign(campaign.id, {
                  ...currentCampaign,
                  generatedAssets: updatedAssets
                });
              }
            }
          }, 1000 * Math.random() * 3); // Random delay between 0-3 seconds to stagger generation
        } catch (error) {
          console.error(`Error starting generation for ${platform}:`, error);
        }
      });

      res.json({ 
        id: campaign.id, 
        campaign: updatedCampaign,
        configCard,
        platformCards: generatedAssets.filter(asset => asset.type !== 'config')
      });
    } catch (error) {
      console.error('Campaign creation error:', error);
      res.status(500).json({ message: "Failed to create campaign", error: (error as Error).message });
    }
  });

  app.get("/api/campaigns", async (req, res) => {
    try {
      const campaigns = await storage.getAllCampaigns();
      res.json(campaigns);
    } catch (error) {
      res.status(500).json({ message: "Failed to fetch campaigns", error: (error as Error).message });
    }
  });

  app.get("/api/campaigns/:id", async (req, res) => {
    try {
      const id = parseInt(req.params.id);
      const campaign = await storage.getCampaign(id);
      if (!campaign) {
        return res.status(404).json({ message: "Campaign not found" });
      }
      res.json(campaign);
    } catch (error) {
      res.status(500).json({ message: "Failed to fetch campaign", error: (error as Error).message });
    }
  });

  // Image analysis endpoint
  app.post("/api/analyze-image", upload.single("image"), async (req, res) => {
    try {
      if (!req.file) {
        return res.status(400).json({ message: "No image file provided" });
      }

      const base64Image = req.file.buffer.toString('base64');
      const analysis = await analyzeImageForCampaign(base64Image);
      
      res.json({
        ...analysis,
        imageBase64: base64Image
      });
    } catch (error) {
      res.status(500).json({ message: "Failed to analyze image", error: (error as Error).message });
    }
  });

  // Generate campaign preview (lightweight, fast preview)
  app.post("/api/generate-preview", async (req, res) => {
    try {
      const { imageBase64, brandTone, targetPlatforms, campaignFocus } = req.body;

      // Generate lightweight preview assets
      const previewAssets = await generatePreviewAssets({
        imageBase64,
        brandTone,
        targetPlatforms,
        campaignFocus
      });

      res.json({ assets: previewAssets });
    } catch (error: any) {
      console.error("Preview generation error:", error);
      res.status(500).json({ 
        message: "Failed to generate preview",
        error: error.message 
      });
    }
  });

  // Campaign generation endpoint
  app.post("/api/generate-campaign", async (req, res) => {
    try {
      const { campaignId, imageBase64, brandTone, targetPlatforms, campaignFocus } = req.body;

      if (!campaignId || !imageBase64 || !brandTone || !targetPlatforms || !campaignFocus) {
        return res.status(400).json({ message: "Missing required fields" });
      }

      // Update campaign status to generating
      await storage.updateCampaign(campaignId, { status: "generating" });

      const assets = await generateCampaignAssets({
        imageBase64,
        brandTone,
        targetPlatforms,
        campaignFocus
      });

      // Assets are already in the correct GeneratedAsset format
      const generatedAssets: GeneratedAsset[] = assets;

      // Generate shareable link
      const shareableLink = `${process.env.REPLIT_DOMAINS?.split(',')[0] || 'localhost:5000'}/executive/${uuidv4()}`;

      // Update campaign with generated assets
      const updatedCampaign = await storage.updateCampaign(campaignId, {
        generatedAssets,
        shareableLink,
        status: "completed"
      });

      res.json(updatedCampaign);
    } catch (error) {
      // Update campaign status to failed
      if (req.body.campaignId) {
        await storage.updateCampaign(req.body.campaignId, { status: "failed" });
      }
      res.status(500).json({ message: "Failed to generate campaign", error: (error as Error).message });
    }
  });

  // Catalog routes
  app.post("/api/catalogs", async (req, res) => {
    try {
      const validatedData = insertCatalogSchema.parse(req.body);
      const catalog = await storage.createCatalog(validatedData);
      res.json(catalog);
    } catch (error) {
      res.status(400).json({ message: "Invalid catalog data", error: (error as Error).message });
    }
  });

  app.get("/api/catalogs", async (req, res) => {
    try {
      const catalogs = await storage.getAllCatalogs();
      res.json(catalogs);
    } catch (error) {
      res.status(500).json({ message: "Failed to fetch catalogs", error: (error as Error).message });
    }
  });

  app.get("/api/catalogs/:id", async (req, res) => {
    try {
      const id = parseInt(req.params.id);
      const catalog = await storage.getCatalog(id);
      if (!catalog) {
        return res.status(404).json({ message: "Catalog not found" });
      }
      res.json(catalog);
    } catch (error) {
      res.status(500).json({ message: "Failed to fetch catalog", error: (error as Error).message });
    }
  });

  // Catalog product routes
  app.post("/api/catalog-products", async (req, res) => {
    try {
      const validatedData = insertCatalogProductSchema.parse(req.body);
      const product = await storage.createCatalogProduct(validatedData);
      res.json(product);
    } catch (error) {
      res.status(400).json({ message: "Invalid product data", error: (error as Error).message });
    }
  });

  app.get("/api/catalogs/:catalogId/products", async (req, res) => {
    try {
      const catalogId = parseInt(req.params.catalogId);
      const products = await storage.getCatalogProducts(catalogId);
      res.json(products);
    } catch (error) {
      res.status(500).json({ message: "Failed to fetch products", error: (error as Error).message });
    }
  });

  app.put("/api/catalog-products/:id", async (req, res) => {
    try {
      const id = parseInt(req.params.id);
      const updates = req.body;
      const product = await storage.updateCatalogProduct(id, updates);
      if (!product) {
        return res.status(404).json({ message: "Product not found" });
      }
      res.json(product);
    } catch (error) {
      res.status(500).json({ message: "Failed to update product", error: (error as Error).message });
    }
  });

  // Product enrichment endpoint
  app.post("/api/enrich-product", upload.single("image"), async (req, res) => {
    try {
      if (!req.file) {
        return res.status(400).json({ message: "No image file provided" });
      }

      const { productName, category } = req.body;
      if (!productName || !category) {
        return res.status(400).json({ message: "Product name and category are required" });
      }

      const base64Image = req.file.buffer.toString('base64');
      const enrichment = await enrichProductDescription(base64Image, productName, category);
      
      res.json({
        ...enrichment,
        imageBase64: base64Image
      });
    } catch (error) {
      res.status(500).json({ message: "Failed to enrich product", error: (error as Error).message });
    }
  });

  // Image generation endpoint
  app.post("/api/generate-image", async (req, res) => {
    try {
      const { prompt } = req.body;
      if (!prompt) {
        return res.status(400).json({ message: "Prompt is required" });
      }

      const result = await generateImage(prompt);
      res.json(result);
    } catch (error) {
      res.status(500).json({ message: "Failed to generate image", error: (error as Error).message });
    }
  });

  // Image proxy endpoint to handle OpenAI blob URLs
  app.get("/api/image-proxy", async (req, res) => {
    try {
      const { url } = req.query;
      if (!url || typeof url !== 'string') {
        return res.status(400).json({ message: "URL parameter required" });
      }

      // Validate it's an OpenAI blob URL for security
      if (!url.includes('oaidalleapiprodscus.blob.core.windows.net')) {
        return res.status(400).json({ message: "Invalid image URL" });
      }

      const response = await fetch(url);
      if (!response.ok) {
        throw new Error(`Failed to fetch image: ${response.status}`);
      }

      const imageBuffer = await response.arrayBuffer();
      const contentType = response.headers.get('content-type') || 'image/png';
      
      res.set({
        'Content-Type': contentType,
        'Cache-Control': 'public, max-age=3600', // Cache for 1 hour
        'Access-Control-Allow-Origin': '*'
      });
      
      res.send(Buffer.from(imageBuffer));
    } catch (error) {
      console.error("Image proxy error:", error);
      res.status(500).json({ message: "Failed to proxy image" });
    }
  });

  // Image generation endpoint for canvas tool
  app.post("/api/generate-image", async (req, res) => {
    try {
      const { prompt } = req.body;
      
      if (!prompt) {
        return res.status(400).json({ message: "Prompt is required" });
      }

      const result = await generateImage(prompt);
      res.json(result);
    } catch (error) {
      console.error("Image generation error:", error);
      res.status(500).json({ message: "Failed to generate image", error: (error as Error).message });
    }
  });

  // Card design generation endpoint
  app.post("/api/generate-card-design", async (req, res) => {
    try {
      const { cardType, prompt } = req.body;
      
      if (!cardType || !prompt) {
        return res.status(400).json({ message: "Card type and prompt are required" });
      }

      const result = await generateCardDesign(cardType, prompt);
      res.json(result);
    } catch (error) {
      console.error("Card design generation error:", error);
      res.status(500).json({ message: "Failed to generate card design", error: (error as Error).message });
    }
  });

  // Collaboration routes
  app.post("/api/campaigns/:id/share", async (req, res) => {
    try {
      const canvasId = parseInt(req.params.id);
      const { enabled, role, maxCollaborators, accessCode } = req.body;
      
      let linkToken = "";
      if (enabled) {
        linkToken = await collaborationService.generateShareLink(canvasId);
      }

      const shareSettings = {
        enabled,
        role: role || "view",
        linkToken,
        maxCollaborators: maxCollaborators || 10,
        ...(accessCode && { accessCode })
      };

      const campaign = await storage.updateCampaignShareSettings(canvasId, shareSettings);
      if (!campaign) {
        return res.status(404).json({ message: "Campaign not found" });
      }

      res.json({ 
        success: true, 
        shareUrl: enabled ? `${req.protocol}://${req.get('host')}/canvas/${canvasId}?token=${linkToken}` : null,
        shareSettings 
      });
    } catch (error) {
      console.error('Error updating share settings:', error);
      res.status(500).json({ message: "Failed to update share settings" });
    }
  });

  app.get("/api/campaigns/:id/collaboration", async (req, res) => {
    try {
      const canvasId = parseInt(req.params.id);
      const state = await collaborationService.getCollaborationState(canvasId);
      res.json(state);
    } catch (error) {
      console.error('Error getting collaboration state:', error);
      res.status(500).json({ message: "Failed to get collaboration state" });
    }
  });

  return httpServer;
}
